<IfModule !ldap_module>
  LoadModule ldap_module modules/mod_ldap.so
</IfModule>
<IfModule !authnz_ldap_module>
  LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
</IfModule>
<IfModule !dav_module>
  LoadModule dav_module modules/mod_dav.so
</IfModule>
<IfModule !dav_fs_module>
  LoadModule dav_fs_module modules/mod_dav_fs.so
</IfModule>
<IfModule !dav_access_module>
  LoadModule dav_access_module modules/mod_dav_access.so
</IfModule>
<IfModule !dav_calendar_module>
  LoadModule dav_calendar_module modules/mod_dav_calendar.so
</IfModule>
<IfModule !ical_module>
  LoadModule ical_module modules/mod_ical.so
</IfModule>


#
# Implement a shared calendar for the ASF.
#
# - A calendar is a WebDav server with some extra extensions allowing calendars
#   to be discovered and searched.
# - We use mod_dav and mod_dav_fs for underlying WebDav functionality,
#   mod_dav_access for basic principal URL and ACL support, and mod_dav_calendar
#   to handle calendar discovery and searching.
# - More specifically, a calendar is a WebDav collection inside a wider WebDav
#   server with metadata indicating the collection contains calendars.
# - Calendars contain events inside zero or more ICS files. These ICS files are
#   created by, named by, and controlled by the Calendar client, and do not have
#   predictable names or behavior.
# - To make the unpredictable above predictable, mod_dav_calendar implements a
#   GET method on the calendar collection, which in turn causes all of the
#   unpredictable ICS files to be combined into a single combined ICS file at a
#   predictable URL. This can be subscribed to on a read only basis by anyone.
# - Calendar clients, if allowed to create calendars themselves, use unpredictable
#   names for the collections, using the display name WebDav property to give the
#   human readable name. For this reason we don't allow clients to create the
#   calendars on their own through controlling permissions on the filesystem.

#
# Inserting data into a calendar from cron etc
#
# - Calendars are just ICS files in a collection. A calendar client can create
#   them, or they can created server side using cron etc.
# - The names of the ICS files are irrelevant and invisible to the end user,
#   usually they're UUIDs or similar. They can be created by creating files
#   in the correct directory, with no further processing needed.
# - ICS files could be PUT to the calendar server, or created directly on the
#   calendar service, WebDav doesn't care.

#
# Debugging a calendar
#
# - Calendar clients are typically eventually consistent, and will ignore most
#   errors on the assumption that a later retry will work.
# - To know exactly what the calendar is actually doing, follow the access_log
#   for details, and interpret each request.
# - Typical methods are REPORT to perform searches, OPTIONS for calendar discovery,
#   GET and PUT to read and write ICS files, and DELETE to remove ICS files.

#
# Chicken and egg - provisioning calendars
#
# - Calendar collections are standard WebDav collections with metadata, just making
#   a directory typically won't do.
# - You can bootstrap a calendar client using DavCalendarHome. The calendar client
#   will ask "what are my default calendars" and the server can respond with URLs.
#   The client will then start requesting data from those collections.
# - You can then autoprovision calendars using DavCalendarProvision. This hooks
#   into a "collection not found" and automatically creates the calendar collection
#   and continues as if the collection existed the whole time.
# - Chicken and egg problem happens when the server doesn't know the canonical list
#   of calendars, and so the client doesn't ask for them. If the client doesn't ask
#   for them, autoprovision doesn't create them.
# - To resolve the chicken and egg, submit a MKCALENDAR method for each collection
#   in a cron job or similar trigger.

LogLevel debug

LDAPTrustedGlobalCert CA_BASE64 /etc/ssl/certs/asf_root.pem

# Step 1 - calendar client will ask where our calendars live
Redirect /.well-known/caldav /calendar/

<AuthzProviderAlias ldap-group asf-members "cn=member,ou=groups,dc=apache,dc=org">
  AuthName "ASF Members"
  AuthType Basic
  AuthBasicProvider ldap
  AuthLDAPUrl "ldaps://ldap-us-ro.apache.org:636/ou=people,dc=apache,dc=org?uid"
  AuthLDAPGroupAttribute memberUid
  AuthLDAPGroupAttributeIsDN off
  AuthLDAPMaxSubGroupDepth 0
  AuthzSendForbiddenOnFailure On
</AuthzProviderAlias>

<AuthzProviderAlias ldap-group asf-pmc-chairs "cn=pmc-chairs,ou=groups,ou=services,dc=apache,dc=org">
  AuthName "ASF Members"
  AuthType Basic
  AuthBasicProvider ldap
  AuthLDAPUrl "ldaps://ldap-us-ro.apache.org:636/ou=people,dc=apache,dc=org?uid"
  AuthLDAPGroupAttribute member
  AuthLDAPGroupAttributeIsDN on
  AuthLDAPMaxSubGroupDepth 0
  AuthzSendForbiddenOnFailure On
</AuthzProviderAlias>

# cn=%{ldap:%{unescape:%{env:MATCH_PMCNAME}}} not supported on Ubuntu, use escape instead relying on no special characters
<AuthzProviderAlias ldap-group asf-pmc-members "cn=%{escape:%{env:MATCH_PMCNAME}},ou=project,ou=groups,dc=apache,dc=org">
  AuthName "PMC member"
  AuthType Basic
  AuthBasicProvider ldap
  authldapurl "ldaps://ldap-us-ro.apache.org:636/ou=people,dc=apache,dc=org?uid"
  AuthLDAPGroupAttribute owner
  AuthLDAPGroupAttributeIsDN on
  AuthLDAPMaxSubGroupDepth 0
  AuthzSendForbiddenOnFailure On
</AuthzProviderAlias>

<AuthzProviderAlias ldap-group asf-root "cn=infrastructure-root,ou=groups,ou=services,dc=apache,dc=org">
  AuthName "ASF Infrastructure"
  AuthType Basic
  AuthBasicProvider ldap
  AuthLDAPUrl "ldaps://ldap-us-ro.apache.org:636/ou=people,dc=apache,dc=org?uid"
  AuthLDAPGroupAttribute member
  AuthLDAPGroupAttributeIsDN on
  AuthLDAPMaxSubGroupDepth 0
  AuthzSendForbiddenOnFailure On
</AuthzProviderAlias>



<Location />
  Dav on
  DavCalendar on
  DavAccessPrincipalUrl /principals/

  AuthType Basic
  AuthName "ASF ID"
  AuthBasicProvider ldap
  authldapurl "ldaps://ldap-us-ro.apache.org:636/ou=people,dc=apache,dc=org?uid"

  # everyone can get
  <Limit GET>
    Require all granted
  </Limit>
  # all asf logins can read webdav
  <Limit OPTIONS PROPFIND REPORT>
    require valid-user
  </Limit>
  # infra can write webdav/caldav
  <LimitExcept GET OPTIONS PROPFIND REPORT>
    Require asf-root
  </LimitExcept>

</Location>

#
# All calendars are shared, so give everyone the same principal
<Location /principals>
  DavCalendarHome /calendar
</Location>

#
# Common configuration for the root of all calendars
#
# We allow anyone to GET, but restrict all other methods to logged in people only
<Location /calendar>
#  SetOutputFilter ICAL
#  ICalFilter none
  DavCalendarTimezone UTC
</Location>

#
# Per calendar configuration
#
# We allow anyone to GET, but restrict all other methods to explicit groups
<LocationMatch "^/calendar/(?<pmcname>[^/]+)">

  #
  # Auto provision calendars
# no autoprovision - we only want MKCALENDAR requests, as a member has access to anything
#  DavCalendarProvision /calendar/%{unescape:%{env:MATCH_PMCNAME}}/

  #
  # Members calendar
  #
  # Members group only
  <If "%{env:MATCH_PMCNAME} == 'members'>
    # everyone can get
    <Limit GET>
      Require all granted
    </Limit>
    # all asf members can read/write webdav
    <Limit OPTIONS PROPFIND REPORT PUT COPY MOVE DELETE>
      Require asf-members
    </Limit>
    # asf infra can mkcol/mkcalendar
    <LimitExcept GET OPTIONS PROPFIND REPORT PUT COPY MOVE DELETE>
      Require asf-root
    </LimitExcept>
  </If>

  #
  # Board calendar
  #
  # Members group OR PMC group
  <Elseif "%{env:MATCH_PMCNAME} == 'board'>
    # everyone can get
    <Limit GET>
      Require all granted
    </Limit>
    # all asf members or pmc chairs can read/write webdav
    <Limit OPTIONS PROPFIND REPORT PUT COPY MOVE DELETE>
      <RequireAny>
        Require asf-members
        Require asf-pmc-chairs
      </RequireAny>
    </Limit>
    # asf infra can mkcol/mkcalendar
    <LimitExcept GET OPTIONS PROPFIND REPORT PUT COPY MOVE DELETE>
      Require asf-root
    </LimitExcept>
  </Elseif>

  #
  # Individual PMC calendars
  #
  # Members group OR PMC group
  <Else>
    # everyone can get
    <Limit GET>
      Require all granted
    </Limit>
    # all asf members or pmc members can read/write webdav
    <Limit OPTIONS PROPFIND REPORT PUT COPY MOVE DELETE>
      <RequireAny>
        Require asf-members
        Require asf-pmc-members
      </RequireAny>
    </Limit>
    # asf infra can mkcol/mkcalendar
    <LimitExcept GET OPTIONS PROPFIND REPORT PUT COPY MOVE DELETE>
      Require asf-root
    </LimitExcept>
  </Else>
</LocationMatch>


